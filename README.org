#+TITLE: MultiPaper: Publish multiple papers in unified manner using Pandoc
#+LATEX_CLASS: koma_article
* Introduction
This framework is a simple Pandoc-based multi-document conversion setup: Multiple papers can be published from a single calling point. 

Two exemplary paper drafts are provided in ~org~[fn:4] and ~markdown~[fn:3] format and published to ~PDF~, using the ~IEEEtran~ LaTeX class as an exemplary publishing format.
* Publishing
Combined publishing is carried out using the publishing class ~Publisher~ shown in the code in the [[*Appendix][Appendix]] directory. The ~publisher.publish~ method carries out the publishing run and returns ~True~ when all subsequent calls to the publishing scripts have been successful:

#+NAME: code_main_publisher_test
#+begin_src python :noweb yes :tangle ./publisherTest.py :results value :exports results 
<<code_main_publisher_main>>

if __name__ == '__main__':
    publisher = Publisher()
    return publisher.publish()
#+end_src

#+RESULTS: code_main_publisher_test
: True

Which papers are to be published can be specified by passing a list of paper directories to the argument ~papers~, for example: 

#+begin_src python :results none :eval never :exports code 
publisher = Publisher(papers=['paperA'])
publisher.publish()
#+end_src

Then, only ~paperA~ is published.

All this python script does is to enter subsequent paper directories and call the ~publish.sh~ scripts therein. Notice that this currently limits the framework to work on unix machines. Adding OS-sensitivity and ~.bat~ scripts alongside or some similar solution makes the framework platform-insensitive.

In the ~publish.sh~ scripts, the author of the paper specifies Pandoc-instructions for the Pandoc translation run. Meta-data --- such as the specification of the goal LaTeX class to be used --- can be specified within the markup documents themselves. In /paperB/, this meta-data is specified within a ~yaml~ header, an excerpt from this looks like:

#+begin_example
documentclass: IEEEtran
classoption:
- twocolumn
colorlinks: true
linkcolor: blue
bibliography: './references.bib'
#+end_example

Here, the LaTeX class is specified, alongside class-specific options, link options and a link to the bibliography file.
** BibLaTeX                                                        :noexport:
http://www.bibtex.org/Using/
* Pandoc
Pandoc[fn:1] is "a free and open source document converter"[fn:2] and can be used to translate within different publication formats. In the two exemplary publication templates /paperA/ and /paperB/, /org/ and /markdown/ formats are used to publish to the IEEE latex template using the default Pandoc latex template. This latex template which can be found alongside a default Pandoc installation is also available in the ~templates~ directory.

Pandoc translates the provided source files ...
** Pandoc-crossref
See https://github.com/lierdakil/pandoc-crossref.
** Pandoc-citeproc
See https://pandoc.org/MANUAL.html#citations.
* Appendix

#+NAME: code_main_publisher_main
#+CAPTION: 
#+begin_src python :results none :exports code
""" Multi-Publishing tools: Publish multiple papers from a single position, supporting
all 'Pandoc' supported formats.
"""
import os, subprocess, sys


class Publisher:
    """ The main publishing method collection.
    """
    # List of excluded directories
    exclude = ['.git', 'templates']
    # Default publishing script label
    defaults = {'scripts': 'publish.sh'}

    def __init__(self, papers='all', verbose=True):
        """
        Args:
            papers (str/list): Defaults to 'all', then all papers are published. When a
                list is given, the papers listed in `papers` are treated.
            verbose (bool): Flag indicating whether verbose information is to be provided
                during a publishing-run.
        """
        # Publisher home directory
        self.home = os.getcwd()
        # List of papers to-be treated
        self.papers = self.select(papers)
        # Flag indicating whether verbose output is to be generated
        self.verbose = verbose

    def select(self, papers):
        """ Select papers to be treated.

        Args:
            papers (str/list): Defaults to 'all', then all papers are published. When a
                list is given, the papers listed in `papers` are treated.

        Returns:
            papers (list): List of paper directories to be treated.
        """
        if type(papers) is str:
            # TODO Exclude unwanted directories
            papers = []
            for directory in next(os.walk('.'))[1]:
                if directory not in Publisher.exclude:
                    papers.append(directory)
        return papers

    def publish(self):
        """ Run the publishing pipeline: Subsequent paper folders are entered and the
        corresponding publishing scripts are called therein. Publishing script labels
        are specified within `Publisher.defaults` under the entry `scripts`.
        Prints verbose output when the corresponding flag `verbose` is set to `True`.

        Returns:
            success (bool): Flag indicating whether all paper calls have been successful.
        """
        success = []
        for paper in self.papers:
            if self.verbose:
                print(f'Publishing paper {paper}')
            try:
                os.chdir(self.home)
                directory = os.path.join(os.getcwd(), paper)
                os.chdir(directory)
                flag = subprocess.call(
                    [os.path.join(directory, Publisher.defaults['scripts'])])
                success.append(True)
            except FileNotFoundError:
                success.append(False)
        if self.verbose:
            successes = sum(success)
            print(f'Finished publishing of `{successes}` papers.')

        return any(success)
#+end_src

* Orga                                                             :noexport:
** Pandoc 
https://Pandoc.org/org.html
** Tasks
*** TODO Augment org-header: Make it standalone
- Include ~minted~ definitions
*** TODO Extend documentation
*** TODO Follow this cookbook
https://opensource.com/article/18/9/pandoc-research-paper
* Footnotes

[fn:4] https://en.wikipedia.org/wiki/Org_mode 

[fn:3] https://en.wikipedia.org/wiki/Markdown 

[fn:2] https://en.wikipedia.org/wiki/Pandoc 

[fn:1] https://Pandoc.org/org.html
 
